# -*- coding: utf-8 -*-
"""AdBO

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dTD97dRCIFg0rQnIKQZEB26_99dU9d5S
"""

try:
    # Check if notebook is running in Google Colab
    import google.colab
    # Install additional dependencies
    !pip install GPy #==1.9.8
    !pip install GPyOpt #==1.2.2
except:
    pass

import io
import pandas as pd
import numpy as np
import seaborn as sn
import matplotlib.pyplot as plt
import time
import GPyOpt
from GPyOpt.methods import BayesianOptimization
from numpy.random import seed

#Setting API, solvent and target variables
API = "API" #Enter name of API from excel sheet
Solvent = "SOLVENT" #Enter name of solvent from excel sheet
Target_GR = #Enter target growth rate
Target_IT = #Enter target induction time
Target_NR = #Enter target nucleation rate

#Creating dataframe
df = pd.read_excel(r"FILE LOCATION", sheet_name = "Kinetics")
raw_df = df[(df["Solute"]==API) & (df["Solvent"]==Solvent)]
raw_df_sel = raw_df[["SS", "Isothermal Temp", "Median Induction Time", "Mean Growth Rate", "Mean Nucleation Rate"]]
dropna_raw_df = raw_df_sel.dropna()
df = pd.DataFrame(dropna_raw_df)
df.insert(2, "T K/100", (df["Isothermal Temp"]+273.15)/100)
df.insert(6, "Transformed Induction Time", abs(np.log(Target_IT) - np.log(df["Median Induction Time"])))
df.insert(6, "Transformed Growth Rate", abs(np.log(Target_GR) - np.log(df["Mean Growth Rate"])))
df.insert(8, "Transformed Nucleation rate", abs(np.log(Target_NR) - np.log(df["Mean Nucleation Rate"])))
df.insert(9, "Objective Function", df["Transformed Induction Time"]+df["Transformed Growth Rate"]+df["Transformed Nucleation rate"])


#Creating initial value variables from df
z_init = df[["Objective Function"]].to_numpy()
xy_init = df[["SS","T K/100"]].to_numpy()

#Bayesian optimisation
seed(123)
start_time = time.time()
def f(x,y):
    return x**2 + x + y**2 + y

bounds = [{'name': 'SS', 'type': 'continuous', 'domain': (2, 3)},
          {'name': 'T', 'type': 'continuous', 'domain': (2.7815, 3.2315)}]

bo_step = GPyOpt.methods.BayesianOptimization(f = f,
                                              domain=bounds,
                                              model_type='GP',
                                              acquisition_type ='EI',
                                              acquisition_jitter = 0.1, #Change this value based on your own requirements
                                              X=xy_init,
                                              Y=z_init)

x_next = bo_step.suggest_next_locations()

print("Value of (x,y) that next should be evaluated to minimize the objective func: "+str(x_next))

bo_step.plot_acquisition()

print("--- %s seconds ---" % (time.time() - start_time))

#Plot of objective function with each iteration
O = np.ravel(df["Objective Function"])
desO = np.sort(O)[::-1]
xn = list(range(0,len(O)))
plt.xlabel("Number of experiments")
plt.ylabel("Objective function")
plt.plot(xn,desO)

#Reduction (of objective function)
O = np.ravel(df["Objective Function"])
HPRed2 = (min(O)/max(O))*100
print("If the below value is below 10 switch to XI=1, below 5 switch to XI=0.1 and RERUN... until next proposed experiment is within +/0 0.01 SS and +/- 1 oC of a previous proposed experiment")
print(HPRed2)